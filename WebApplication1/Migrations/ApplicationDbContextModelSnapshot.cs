// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Dzivoklis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DzivojamaPlatiba")
                        .HasColumnType("float");

                    b.Property<int>("IedzivotajuSkaits")
                        .HasColumnType("int");

                    b.Property<int>("IstabuSkaits")
                        .HasColumnType("int");

                    b.Property<Guid>("MajaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Numurs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PilnaPlatiba")
                        .HasColumnType("float");

                    b.Property<int>("Stavs")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MajaId");

                    b.ToTable("Dzivoklis");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8885a8e4-c413-4ad9-b6d5-81b92fade313"),
                            DzivojamaPlatiba = 60.5,
                            IedzivotajuSkaits = 2,
                            IstabuSkaits = 3,
                            MajaId = new Guid("9602a111-ec49-473c-a3d4-4aa49fcdf072"),
                            Numurs = "1",
                            PilnaPlatiba = 80.5,
                            Stavs = 1
                        },
                        new
                        {
                            Id = new Guid("8e949078-e895-47a9-9937-8438c461caba"),
                            DzivojamaPlatiba = 75.0,
                            IedzivotajuSkaits = 3,
                            IstabuSkaits = 4,
                            MajaId = new Guid("6f9c399c-07dc-4eaa-b5f5-8b43faecd857"),
                            Numurs = "2",
                            PilnaPlatiba = 100.0,
                            Stavs = 2
                        },
                        new
                        {
                            Id = new Guid("1284032f-1af6-47df-a1e2-b577ac8fd70b"),
                            DzivojamaPlatiba = 45.0,
                            IedzivotajuSkaits = 1,
                            IstabuSkaits = 2,
                            MajaId = new Guid("9602a111-ec49-473c-a3d4-4aa49fcdf072"),
                            Numurs = "3",
                            PilnaPlatiba = 50.0,
                            Stavs = 3
                        },
                        new
                        {
                            Id = new Guid("429d6417-e9f7-4935-852b-75ea57c2d8a1"),
                            DzivojamaPlatiba = 100.0,
                            IedzivotajuSkaits = 4,
                            IstabuSkaits = 5,
                            MajaId = new Guid("9602a111-ec49-473c-a3d4-4aa49fcdf072"),
                            Numurs = "4",
                            PilnaPlatiba = 120.0,
                            Stavs = 4
                        },
                        new
                        {
                            Id = new Guid("d9eb29b4-d6f0-4641-8fda-de701b8b945f"),
                            DzivojamaPlatiba = 65.0,
                            IedzivotajuSkaits = 2,
                            IstabuSkaits = 3,
                            MajaId = new Guid("6f9c399c-07dc-4eaa-b5f5-8b43faecd857"),
                            Numurs = "5",
                            PilnaPlatiba = 85.0,
                            Stavs = 5
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.DzivoklisIedzivotajs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DzivoklisId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IedzivotajsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DzivoklisId");

                    b.HasIndex("IedzivotajsId");

                    b.ToTable("DzivoklisIedzivotaji");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d9a84b2-0e21-44bb-8199-e8423dfb5873"),
                            DzivoklisId = new Guid("8885a8e4-c413-4ad9-b6d5-81b92fade313"),
                            IedzivotajsId = new Guid("0d494529-7490-4d88-a338-98e289b21800"),
                            IsOwner = true
                        },
                        new
                        {
                            Id = new Guid("cbb351b5-ce64-49fa-8adc-e99d2ee03e05"),
                            DzivoklisId = new Guid("8885a8e4-c413-4ad9-b6d5-81b92fade313"),
                            IedzivotajsId = new Guid("72fbe92f-6557-4620-84cc-cb63db66403a"),
                            IsOwner = false
                        },
                        new
                        {
                            Id = new Guid("c88b253a-207e-4740-b592-2133f8875a0b"),
                            DzivoklisId = new Guid("8e949078-e895-47a9-9937-8438c461caba"),
                            IedzivotajsId = new Guid("0d494529-7490-4d88-a338-98e289b21800"),
                            IsOwner = true
                        },
                        new
                        {
                            Id = new Guid("3aa79b03-a77d-40e9-8863-816ef3d8f451"),
                            DzivoklisId = new Guid("1284032f-1af6-47df-a1e2-b577ac8fd70b"),
                            IedzivotajsId = new Guid("0d494529-7490-4d88-a338-98e289b21800"),
                            IsOwner = false
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Iedzivotajs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DzimsanasDatums")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonasKods")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefons")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uzvards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Iedzivotajs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d494529-7490-4d88-a338-98e289b21800"),
                            DzimsanasDatums = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janis@gmail.com",
                            PersonasKods = "123456-78910",
                            Telefons = "+371 12345678",
                            Uzvards = "Bērziņš",
                            Vards = "Jānis"
                        },
                        new
                        {
                            Id = new Guid("72fbe92f-6557-4620-84cc-cb63db66403a"),
                            DzimsanasDatums = new DateTime(1985, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anna@inbox.lv",
                            PersonasKods = "223456-78910",
                            Telefons = "+371 87654321",
                            Uzvards = "Zvaigzne",
                            Vards = "Anna"
                        },
                        new
                        {
                            Id = new Guid("f182a7d3-2aad-40de-9290-cc427b267305"),
                            DzimsanasDatums = new DateTime(1990, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "peteris@gmail.com",
                            PersonasKods = "323456-78910",
                            Telefons = "+371 23456789",
                            Uzvards = "Kalniņš",
                            Vards = "Pēteris"
                        },
                        new
                        {
                            Id = new Guid("242d86c8-1aa7-4574-9e81-2ac581e46a61"),
                            DzimsanasDatums = new DateTime(1992, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "liga@inbox.lv",
                            PersonasKods = "423456-78910",
                            Telefons = "+371 34567890",
                            Uzvards = "Liepiņa",
                            Vards = "Līga"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Maja", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Iela")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Numurs")
                        .HasColumnType("int");

                    b.Property<string>("PastaIndekss")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pilseta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valsts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Majas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9602a111-ec49-473c-a3d4-4aa49fcdf072"),
                            Iela = "Brīvības iela",
                            Numurs = 1,
                            PastaIndekss = "LV-1010",
                            Pilseta = "Rīga",
                            Valsts = "Latvija"
                        },
                        new
                        {
                            Id = new Guid("6f9c399c-07dc-4eaa-b5f5-8b43faecd857"),
                            Iela = "Lāčplēša iela",
                            Numurs = 2,
                            PastaIndekss = "LV-1011",
                            Pilseta = "Rīga",
                            Valsts = "Latvija"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Dzivoklis", b =>
                {
                    b.HasOne("WebApplication1.Models.Maja", "Maja")
                        .WithMany()
                        .HasForeignKey("MajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maja");
                });

            modelBuilder.Entity("WebApplication1.Models.DzivoklisIedzivotajs", b =>
                {
                    b.HasOne("WebApplication1.Models.Dzivoklis", "Dzivoklis")
                        .WithMany()
                        .HasForeignKey("DzivoklisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Iedzivotajs", "Iedzivotajs")
                        .WithMany()
                        .HasForeignKey("IedzivotajsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dzivoklis");

                    b.Navigation("Iedzivotajs");
                });
#pragma warning restore 612, 618
        }
    }
}
